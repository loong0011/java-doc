{"version":"282e57be474e72fb","fileName":"HashMap.java","fileSimpleName":"HashMap","fileType":"java","notes":{"640":"是否遍历到链表的尾节点","706":"将旧table表中的数据移动至新table中来","642":"如果链表长度大于等于阈值(8)，则将链表转化为红黑树","710":"该数组节点上的数据为空，则直接赋值","647":"如果某个节点的key相同，则使用该节点","712":"该节点下是一个红黑树的链表","714":"该节点是链表","654":"putIfAbsent方法，如果为onlyIfAbsent为true，则将原来的value返回，不管是否为空","272":"最小转换为树的容量大小","720":"等于0，则表示e在新table中的位置不变","661":"table容量大于阈值则扩容","739":"e.hash \u0026 oldCap) 不等于0，则e在新table中的位置为 旧table的容量+旧table的位置","676":"初始化或者扩容数组表的大小，如果为空，则使用默认阈值(8),","685":"新容量赋值为当前 table表长度*2","627":"table为空，则需要初始化table大小","756":"如果table表为空，或者table表的容量小于最小容量值(64),则只是进行table扩容，不将链表转化为红黑树","693":"使用默认初始化数组大小-16","629":"获取插入数据所在的table表的位置为空，则直接创建node节点赋值","694":"使用默认 0.75的哈希因子，计算出阀值","631":"插入的table位置的节点数据不为空","248":"这个","634":"插入的key与当前table节点的key一致或者equals为true","636":"当前table节点为红黑树","638":"该table节点为链表","703":"创建新的容量的数据table表"}}